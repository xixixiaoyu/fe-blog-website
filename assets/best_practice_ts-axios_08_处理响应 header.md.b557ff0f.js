import{_ as s,c as a,o as n,V as l}from"./chunks/framework.9b53f02e.js";const C=JSON.parse('{"title":"处理响应 header","description":"","frontmatter":{},"headers":[],"relativePath":"best_practice/ts-axios/08_处理响应 header.md","filePath":"best_practice/ts-axios/08_处理响应 header.md","lastUpdated":1683806197000}'),p={name:"best_practice/ts-axios/08_处理响应 header.md"},o=l(`<h1 id="处理响应-header" tabindex="-1">处理响应 header <a class="header-anchor" href="#处理响应-header" aria-label="Permalink to &quot;处理响应 header&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>我们通过 <code>XMLHttpRequest</code> 对象的 <code>getAllResponseHeaders</code> 方法获取到的值是如下一段字符串：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">date: Fri, 05 Apr 2019 12:40:49 GMT</span></span>
<span class="line"><span style="color:#A6ACCD;">etag: W/&quot;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">connection: keep-alive</span></span>
<span class="line"><span style="color:#A6ACCD;">x-powered-by: Express</span></span>
<span class="line"><span style="color:#A6ACCD;">content-length: 13</span></span>
<span class="line"><span style="color:#A6ACCD;">content-type: application/json; charset=utf-8</span></span></code></pre></div><p>每一行都是以回车符和换行符 <code>\\r\\n</code> 结束，它们是每个 <code>header</code> 属性的分隔符。对于上面这串字符串，我们希望最终解析成一个对象结构：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  date</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;Fri</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 05 Apr 2019 12</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">40</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">49</span><span style="color:#A6ACCD;"> GMT&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  etag: &#39;W/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">d-Ssxx4FRxEutDLwo2+xkkxKc4y0k</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  connection</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;keep-alive&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;x-powered-by&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;Express&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;content-length&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;content-type&#39;: &#39;application/json; charset=utf</span><span style="color:#F78C6C;">-8</span><span style="color:#A6ACCD;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="parseheaders-函数实现及应用" tabindex="-1">parseHeaders 函数实现及应用 <a class="header-anchor" href="#parseheaders-函数实现及应用" aria-label="Permalink to &quot;parseHeaders 函数实现及应用&quot;">​</a></h2><p>根据需求分析，我们要实现一个 <code>parseHeaders</code> 工具函数。</p><p><code>helpers/headers.ts</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseHeaders</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parsed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">headers</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parsed</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\r\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">line</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">line</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">parsed</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parsed</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后我们使用这个工具函数：</p><p><code>xhr.ts</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> responseHeaders </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseHeaders</span><span style="color:#A6ACCD;">(request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAllResponseHeaders</span><span style="color:#A6ACCD;">())</span></span></code></pre></div><p>接着我们再去看刚才的 demo，发现我们已经把响应的 <code>headers</code> 字段从字符串解析成对象结构了。那么接下来，我们在解决之前遗留的第二个问题：对响应 <code>data</code> 字段的处理。</p>`,14),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
