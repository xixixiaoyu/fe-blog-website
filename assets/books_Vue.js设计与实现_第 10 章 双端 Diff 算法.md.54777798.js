import{_ as s,c as a,o as n,V as l}from"./chunks/framework.9b53f02e.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"books/Vue.js设计与实现/第 10 章 双端 Diff 算法.md","filePath":"books/Vue.js设计与实现/第 10 章 双端 Diff 算法.md","lastUpdated":1684254416000}'),p={name:"books/Vue.js设计与实现/第 10 章 双端 Diff 算法.md"},o=l(`<h3 id="_10-1-双端比较的原理" tabindex="-1">10.1 双端比较的原理 <a class="header-anchor" href="#_10-1-双端比较的原理" aria-label="Permalink to &quot;10.1 双端比较的原理&quot;">​</a></h3><p>简单 Diff 算法的问题在于，它对 DOM 的移动操作并不是最优的，我们举个例子： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684215463659-8a1ea4a2-2ae8-4a89-a7bb-ae7e01688a6c.png#averageHue=%23e6e6e6&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=244&amp;id=u2417e3af&amp;originHeight=488&amp;originWidth=850&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=67490&amp;status=done&amp;style=none&amp;taskId=ua024e6e7-7882-487c-b5a6-e370ea86ff8&amp;title=&amp;width=425" alt="image.png"> 上图如果使用简单 Diff，则会发生两次 DOM 移动操作： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684215521192-ed808325-a29d-4488-9818-cb97c23e03ec.png#averageHue=%23ededed&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=330&amp;id=u392eb50f&amp;originHeight=730&amp;originWidth=902&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=165679&amp;status=done&amp;style=none&amp;taskId=u5f1afd8a-f131-4779-89d5-d1dc8f0f0b7&amp;title=&amp;width=408" alt="image.png"> 上述两次移动操作，其实只需要把真实 DOM 节点 p-3 移动到真实 DOM 节点 p-1 之前这一次操作即可： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684215657501-02b93914-6e2c-4aa8-97e8-4f5d8a57af38.png#averageHue=%23ededed&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=325&amp;id=uc0a251f0&amp;originHeight=650&amp;originWidth=948&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=120589&amp;status=done&amp;style=none&amp;taskId=u53c30b65-c23d-4b25-8acf-c87ad1b241b&amp;title=&amp;width=474" alt="image.png"> 上述操作，我们可以通过双端 Diff 算法实现。 双端 Diff 算法是同时比较两组子节点的头尾进行比较的一种算法。首先，我们需要设定四个索引，分别指向新旧子节点的两端： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684216359467-5477ad18-58f8-4bc1-a21e-5a965941ff4a.png#averageHue=%23eeeeee&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=249&amp;id=u6623cea8&amp;originHeight=498&amp;originWidth=998&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=60906&amp;status=done&amp;style=none&amp;taskId=u68694b15-e047-45b4-b8bc-de724ffb6f7&amp;title=&amp;width=499" alt="image.png"></p><p>我们在 <strong>patchChildren</strong> 和 <strong>patchKeyedChildren</strong> 函数中定义了四个端点：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">patchChildren</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">n2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">container</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 封装 patchKeyedChildren 函数处理两组子节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patchKeyedChildren</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">patchKeyedChildren</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">n2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">container</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 四个索引值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在 <strong>patchKeyedChildren</strong> 函数中，我们首先获取新旧子节点集，然后创建四个索引分别指向新旧子节点的起始和结束位置。 然后，我们可以利用这些索引找到对应的虚拟节点：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">patchKeyedChildren</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">n2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">container</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 四个索引指向的 vnode 节点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>双端比较过程可以分为四步： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684216896802-c985eb4f-99f4-4a17-82f7-ffbe1d79450a.png#averageHue=%23ededed&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=273&amp;id=ua88f0b87&amp;originHeight=546&amp;originWidth=1064&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=87625&amp;status=done&amp;style=none&amp;taskId=u92883510-229a-4ce4-9f9d-7fd01a2e963&amp;title=&amp;width=532" alt="image.png"></p><ol><li>首先，我们比较旧子节点集的第一个节点和新子节点集的第一个节点，如果它们的 <strong>key</strong> 值不同，则说明它们不可复用。</li><li>然后，我们比较旧子节点集的最后一个节点和新子节点集的最后一个节点，如果它们的 <strong>key</strong> 值不同，同样，它们也不可复用。</li><li>接下来，我们比较旧子节点集的第一个节点和新子节点集的最后一个节点，如果它们的 <strong>key</strong> 值不同，那么它们也不可复用。</li><li>最后，我们比较旧子节点集的最后一个节点和新子节点集的第一个节点，如果它们的 <strong>key</strong> 值相同，说明它们可复用。</li></ol><p>当我们发现可复用的元素之后，只需将其移动到正确位置即可，上面我们如果我们在比较过程中发现旧子节点集的最后一个节点与新子节点集的第一个节点相同，那么我们就应该将这个节点从尾部移动到头部。对应的代码如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">patchKeyedChildren</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">n2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">container</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 比较头部</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 比较尾部</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 旧头部与新尾部比较</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 新头部与旧尾部比较</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// oldEndVNode.el 移动到 oldStartVNode.el 前面</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">insert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新索引值，指向下一个位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述代码，我们使用一系列的 <strong>if...else if...</strong> 语句比较四个索引指向的虚拟节点 在比较过程的最后一步，我们发现具有相同 <strong>key</strong> 值的节点，说明它们可以复用。因此，我们只需要将尾部元素移动到头部，即我们只需要以头部元素 oldStartVNode.el 作为锚点，将尾部元素 oldEndVNode.el 移动到锚点前面即可，注意移动之前，我们还需要调用 <strong>patch</strong> 函数为新旧虚拟节点打补丁。</p><p>完成 DOM 移动操作之后，接下来的关键步骤是更新索引值，由于第四步中涉及的两个索引分别是 oldEndIdx 和 newStartIdx，所以我们需要更新两者的值，让它们各自朝正确的方向前进一步，并指向下一个节点： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684219053163-2ae705bc-7bfb-4ad7-8e81-a660b7207480.png#averageHue=%23f2f2f2&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=348&amp;id=u37fd783e&amp;originHeight=696&amp;originWidth=1280&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=149572&amp;status=done&amp;style=none&amp;taskId=u1df34683-afa0-451e-b591-6804197f81d&amp;title=&amp;width=640" alt="image.png"> 此时，真实 DOM 节点顺序为 p-4、p-1、p-2、p-3，这与新的一组子节点顺序不一致。这是因为 Diff 算法还没结束，我们还需继续下一轮更新，我们将其封装到一个 while 循环中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ... </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述代码，整个 while 循环执行的条件是：头部索引值要小于等于尾部索引值。 第一轮更新后循环条件仍然成立，如上图所示，因此需要进行下一轮的比较：</p><ol><li>首先，我们比较旧子节点头部节点 p-1 与新子节点头部节点 p-2。这里的头部节点指向的是由 oldStartIdx 和 newStartIdx 索引标识的节点。由于 p-1 与 p-2 的 key 值不同，它们不能复用，故不进行任何操作。</li><li>接着，我们比较旧子节点尾部节点 p-3 与新子节点尾部节点 p-3。它们的 key 值相同，故可复用。并且，由于都在尾部，无需移动 DOM，只需打补丁即可。代码如下：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 头部节点比较</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 尾部节点比较</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 双方都在尾部，只需打补丁</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新索引和节点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 省略其他情况</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这一轮更新完成之后，新旧两组子节点与真实 DOM 节点的状态，如图所示： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684222239147-37b7890a-a936-44ba-91fd-086db95cae67.png#averageHue=%23f3f3f3&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=344&amp;id=u2b8e9f2d&amp;originHeight=688&amp;originWidth=1286&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=144189&amp;status=done&amp;style=none&amp;taskId=uc29a1c1d-f0f1-4269-88af-8351ef83e76&amp;title=&amp;width=643" alt="image.png"> DOM 的顺序无变化，因为此轮比较未移动任何 DOM，仅对节点 p-3 打补丁。现在，让我们进入下轮比较：</p><ol><li>首先，我们比较旧子节点组中的头部节点 p-1 和新子节点组中的头部节点 p-2。由于它们的 key 值不同，它们是不可复用的，所以我们不做任何操作。</li><li>其次，我们比较旧子节点组中的尾部节点 p-2 和新子节点组中的尾部节点 p-1。同样，由于它们的 key 值不同，它们也是不可复用的，所以我们不做任何操作。</li><li>然后，我们比较旧子节点组中的头部节点 p-1 和新子节点组中的尾部节点 p-1。由于它们的 key 值相同，它们是可复用的。在这个比较过程中，我们发现了相同的节点。这说明 p-1 节点在新的顺序中从头部节点变为了尾部节点。因此，我们需要将 p-1 节点对应的真实 DOM 移动到旧子节点组的尾部节点 p-2 所对应的真实 DOM 后面，并更新相关索引到下一个位置。如下图所示</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684222963057-ea157a7e-b183-4d62-9ed9-74c43a9c8b75.png#averageHue=%23f4f4f4&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=345&amp;id=u8de89b4e&amp;originHeight=690&amp;originWidth=1268&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=141010&amp;status=done&amp;style=none&amp;taskId=uf549135e-cb07-47b1-abf3-f3523e9fc9b&amp;title=&amp;width=634" alt="image.png"> 实现如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用 patch 函数在 oldStartVNode 和 newEndVNode 之间打补丁</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将旧的一组子节点的头部节点对应的真实 DOM 节点 oldStartVNode.el 移动到旧的一组子节点的尾部节点对应的真实 DOM 节点后面</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">insert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSibling</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新相关索引到下一个位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述代码，如果旧子节点组的头部节点与新子节点组的尾部节点匹配，则旧节点对应的真实DOM节点需要移动到尾部。我们获取当前尾部节点的下一个兄弟节点作为锚点，即oldEndVNode.el.nextSibling，并更新相关索引到下一个位置。</p><ol start="4"><li>然后我们比较旧子节点组中的头部节点 p-2 与新子节点组中的头部节点 p-2。发现它们的 key 值相同，是可复用的，但无需移动，只需调用 patch 函数进行打补丁即可。整体代码实现如下：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用 patch 函数在 oldStartVNode 与 newStartVNode 之间打补丁</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新相关索引，指向下一个位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">insert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSibling</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">insert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这轮更新完成后，真实 DOM 节点的顺序与新子节点组的顺序相同了：p-4, p-2, p-1, p-3。 同时，因为 newStartIdx 和 oldStartIdx 的值都小于 newEndIdx 和 oldEndIdx，所以循环终止，双端 Diff 算法执行完毕： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684234929410-0de7836c-baf0-4c9d-96ea-b2a57f997157.png#averageHue=%23f4f4f4&amp;clientId=u311c4004-c0a4-4&amp;from=paste&amp;height=291&amp;id=u5fd6e3de&amp;originHeight=582&amp;originWidth=1298&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=106381&amp;status=done&amp;style=none&amp;taskId=ufd26baf6-ecea-4602-85af-43fddc24ddb&amp;title=&amp;width=649" alt="image.png"></p><h3 id="_10-2-双端比较的优势" tabindex="-1">10.2 双端比较的优势 <a class="header-anchor" href="#_10-2-双端比较的优势" aria-label="Permalink to &quot;10.2 双端比较的优势&quot;">​</a></h3><p>我们使用双端 Diff 算法对演示下最上面提及的简单 Diff 二次移动 DOM 操作，看看它是否能优化 <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684236540361-eb791dcd-0393-4e1d-a1c9-b78cb9554a18.png#averageHue=%23ececec&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=232&amp;id=ub83ce251&amp;originHeight=464&amp;originWidth=1274&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=96696&amp;status=done&amp;style=none&amp;taskId=u0ca934ce-4d36-49b4-ac21-e45aae5c55c&amp;title=&amp;width=637" alt="image.png"> 我们按照双端比较的步骤执行更新：</p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-3，两者 key 值不同，不可复用</li><li>比较旧的一组子节点中的尾部节点 p-3 与新的一组子节点中的尾部节点 p-2，两者 key 值不同，不可复用</li><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的尾部节点 p-2，两者 key 值不同，不可复用</li><li>比较旧的一组子节点中的尾部节点 p-3 与新的一组子节 点中的头部节点 p-3，发现可以进行复用</li></ol><p>在第四步我们找到了位于尾部的，可复用的节点 p-3，但它在新的一组子节点中处于头部。因此，只需要让节点 p-3 对应的真实 DOM 变成新的头部节点即可： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684236702301-5beeff9d-cef2-46cd-bafa-4470de068673.png#averageHue=%23f1f1f1&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=280&amp;id=u9dc7c5f2&amp;originHeight=560&amp;originWidth=1262&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=112750&amp;status=done&amp;style=none&amp;taskId=uc4a9df92-4b68-4874-b530-a8c390b677f&amp;title=&amp;width=631" alt="image.png"> 此时其实真实 DOM 节点的顺序已经与新的一组子节点的顺序一致了。但双端比较依然会继续下一轮比较：</p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-1，两者的 key 值相同，可以复用。但由于两者都处于头部，因此不需要移动，只需要打补丁即可：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684236803080-aae5896a-f8d6-40c8-b128-e3df1265999e.png#averageHue=%23f1f1f1&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=232&amp;id=ua2fc67d8&amp;originHeight=464&amp;originWidth=1282&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=99289&amp;status=done&amp;style=none&amp;taskId=ueb7fb1b6-4eef-416f-a979-b22e76cd9dc&amp;title=&amp;width=641" alt="image.png"> 此时，双端 Diff 算法仍然没有停止，开始新一轮的比较：</p><ol><li>比较旧的一组子节点中的头部节点 p-2 与新的一组 子节点中的头部节点 p-2，两者的 key 值相同，可以复用。但由 于两者都处于头部，因此不需要移动，只需要打补丁即可：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684236880201-9b0a8609-2c3c-4f16-ba5b-21347d7e584c.png#averageHue=%23f5f5f5&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=258&amp;id=u79e1d42a&amp;originHeight=516&amp;originWidth=1288&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=85328&amp;status=done&amp;style=none&amp;taskId=u6e4baad7-e5ed-4fa3-8ecb-f030ce52aba&amp;title=&amp;width=644" alt="image.png"> 此时，索引 newStartIdx 比 newEndIdx 大，oldStartIdx 比 oldEndIdx 大，循环结束，于是更新结束。 同样例子简单 Diff 两次完成 DOM 移动操作，双端 Diff 算法只需要一次 DOM 移动操作即可完成更新。</p><h3 id="_10-3-非理想状况的处理方式" tabindex="-1">10.3 非理想状况的处理方式 <a class="header-anchor" href="#_10-3-非理想状况的处理方式" aria-label="Permalink to &quot;10.3 非理想状况的处理方式&quot;">​</a></h3><p>在双端Diff算法中，有时我们会遇到一种情况，即旧子节点和新子节点的头尾均无法匹配。在这种情况下，我们需要采取额外的步骤来处理。下面以一个例子来具体说明： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684250032960-3d3ee652-edc2-44f3-9da7-b83f0f5421af.png#averageHue=%23ededed&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=303&amp;id=u06108524&amp;originHeight=606&amp;originWidth=1294&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=117343&amp;status=done&amp;style=none&amp;taskId=u448375b5-5e20-4133-97eb-7354c5aa908&amp;title=&amp;width=647" alt="image.png"> 旧的子节点组：p-1、p-2、p-3、p-4。 新的子节点组：p-2、p-4、p-1、p-3。 在尝试使用双端 Diff 算法进行比较时，我们会发现无法找到匹配的节点。</p><p>这时，我们用新的一组子节点的头部节点去旧的一组节点寻找：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 遍历旧的一组子节点，试图寻找与 newStartVNode 拥有相同 key 值的节点</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnodeToMove</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 不要忘记除移动操作外还应该打补丁</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vnodeToMove</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#82AAFF;">insert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vnodeToMove</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 由于位置 idxInOld 处的节点所对应的真实 DOM 已经移动到了别处，因此将其设置为 undefined</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 最后更新 newStartIdx 到下一个位置</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>p2 最终移动如下图： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684250776384-a82c95d4-3c14-4fbf-af8c-758bc98000a9.png#averageHue=%23f2f2f2&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=325&amp;id=a7XHR&amp;originHeight=712&amp;originWidth=1280&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=121817&amp;status=done&amp;style=none&amp;taskId=uc6cbe85d-c2e3-445c-834d-667ad6051e9&amp;title=&amp;width=585" alt="image.png"> 上述代码，我们首先在旧的子节点组中寻找与新的子节点组头部节点相同的节点，并将其索引存储在变量 idxInOld 中。查看 idxInOld 是否大于 0。 如果找到了匹配的节点（即idxInOld &gt; 0），我们将该节点对应的真实 DOM 移动到当前的头部节点前，并更新相关索引到下一个位置。注意在移动节点之前，我们需要调用 patch 函数进行更新 代码最终执行后如下图： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684251767470-1269c7ca-b922-4e94-a5d4-e32004396da6.png#averageHue=%23f2f2f2&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=351&amp;id=ud25d7b6d&amp;originHeight=702&amp;originWidth=1280&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=121481&amp;status=done&amp;style=none&amp;taskId=u9c3efd0f-7ca2-4f34-b8e2-828cc4e2aec&amp;title=&amp;width=640" alt="image.png"> 此时，真实 DOM 的顺序为：p-2、p-1、p-3、p-4。接着，双 端 Diff 算法会继续进行： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684252188991-c1315214-6e77-4992-8aae-42ae9993c3a6.png#averageHue=%23efefef&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=279&amp;id=u61f2d73a&amp;originHeight=558&amp;originWidth=1210&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=114194&amp;status=done&amp;style=none&amp;taskId=uc7011882-648a-49de-ba80-61c9636e00f&amp;title=&amp;width=605" alt="image.png"></p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节 点中的头部节点 p-4，两者 key 值不同，不可复用。</li><li>比较旧的一组子节点中的尾部节点 p-4 与新的一组子节 点中的尾部节点 p-3，两者 key 值不同，不可复用。</li><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节 点中的尾部节点 p-3，两者 key 值不同，不可复用。</li><li>比较旧的一组子节点中的尾部节点 p-4 与新的一组子节 点中的头部节点 p-4，两者的 key 值相同，可以复用。</li></ol><p>在这一轮第四步我们找到可复用的节点，因此，按照双端 Diff 算法的逻辑移动真实 DOM，即把节点 p-4 对应的真实 DOM 移动到旧的一组子节点中头部节点 p-1 所对应的真实 DOM 前面： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684252351193-b2069f41-872f-4fea-9eb6-035ba875992f.png#averageHue=%23f3f3f3&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=347&amp;id=u59f22002&amp;originHeight=694&amp;originWidth=1280&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=145077&amp;status=done&amp;style=none&amp;taskId=u4a659f9d-a9e8-43d5-ab72-7780d7aad4c&amp;title=&amp;width=640" alt="image.png"> 此时，真实 DOM 节点的顺序是：p-2、p-4、p-1、p-3。接着，开始下一轮的比较：</p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-1，两者的 key 值相同，可以复用。</li></ol><p>这一轮比较中，第一步就找到了可复用的节点。由于两者都处 于头部，所以不需要对真实 DOM 进行移动，只需要打补丁即可： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684252657726-488c0fb3-9a21-4ab8-a60d-5a9ac8922b29.png#averageHue=%23f2f2f2&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=304&amp;id=ua3180c27&amp;originHeight=608&amp;originWidth=1296&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=124412&amp;status=done&amp;style=none&amp;taskId=u9fa2c1eb-282c-40af-9e55-12ddcc02e7a&amp;title=&amp;width=648" alt="image.png"> 此时，真实 DOM 节点的顺序是：p-2、p-4、p-1、p-3。接着，进行下一轮的比较。 值得注意的是，旧子节点组的首节点现在是 undefined，意味着该节点已被处理，我们可以直接跳过。为此，我们需要补充这部分逻辑的代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 最上面增加两个判断，如果节点为 undefined，说明已处理，直接跳到下一个位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 后续逻辑省略...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这一轮比较过后，新旧两组子节点与真实 DOM 节点的状态： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684252976479-1a019732-15ff-4cbc-84f9-e06d3fd29bba.png#averageHue=%23f1f1f1&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=259&amp;id=u79ced0be&amp;originHeight=518&amp;originWidth=1136&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=105117&amp;status=done&amp;style=none&amp;taskId=uc6b52153-3c70-4c59-8e47-1b07d8f1dcc&amp;title=&amp;width=568" alt="image.png"> 接着进行最后一轮的比较：</p><ol><li>比较旧的一组子节点中的头部节点 p-3 与新的一组子节点中的头部节点 p-3，两者的 key 值相同，可以复用</li></ol><p>在第一步中找到了可复用的节点。由于两者都是头部节点，因此 不需要进行 DOM 移动操作，直接打补丁即可。在这一轮比较过后，最终状态如图： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684253054415-7fc3fb74-46b2-4adf-8646-758d09d32338.png#averageHue=%23f3f3f3&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=277&amp;id=u8f372e62&amp;originHeight=554&amp;originWidth=1154&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=99986&amp;status=done&amp;style=none&amp;taskId=uc49bbcc3-768a-44f9-a576-17322dd4f4d&amp;title=&amp;width=577" alt="image.png"> 这时，满足循环停止的条件，于是更新完成。最终，真实 DOM 节点的顺序与新的一组子节点的顺序一致，都是：p-2、p-4、p-1、p3。</p><h3 id="_10-4-添加新元素" tabindex="-1">10.4 添加新元素 <a class="header-anchor" href="#_10-4-添加新元素" aria-label="Permalink to &quot;10.4 添加新元素&quot;">​</a></h3><p>在前一节，我们讨论了如何处理不理想情况，即在一轮比较中，都无法匹配上我们的四个步骤。在这种情况下，我们会尝试用新子节点集合的头节点去旧子节点集合中寻找可复用的节点，但并非总能找到匹配的节点，如图所示： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684253563261-5507bc36-9611-4da2-b181-331c9359d4f4.png#averageHue=%23efefef&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=272&amp;id=u53378223&amp;originHeight=544&amp;originWidth=1266&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=109919&amp;status=done&amp;style=none&amp;taskId=u1ff5dd58-b814-40f3-8286-4ccad63694f&amp;title=&amp;width=633" alt="image.png"> 考虑这样一个例子：旧子节点集合为 p-1、p-2、p-3，新的子节点集合为 p-4、p-1、p-3、p-2。 在初次比较时，我们无法找到可复用的节点。我们尝试用新的头节点 p-4 去旧节点集合中寻找相同 key 的节点，但旧集合中并没有 p-4 节点 这表明 p-4 是一个新增的节点，我们应将它插入到正确的位置。由于 p-4 是新子节点集合的头节点，我们可以直接将其插入到当前头节点之前。这里的&quot;当前&quot;头节点指的是旧子节点集合中的头节点对应的真实 DOM 节点 p-1。下面的代码展示了如何实现这个挂载操作：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">oldStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">oldEndIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">oldEndVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findIndex</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vnodeToMove</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vnodeToMove</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">insert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vnodeToMove</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">oldChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">idxInOld</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 将 newStartVNode 作为新节点挂载到头部，使用当前头部节点</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// oldStartVNode.el 作为锚点</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newStartVNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>当 <strong>idxInOld &gt; 0</strong> 不成立时，说明 <strong>newStartVNode</strong> 是一个全新的节点。因为它是头节点，我们应将其作为新的头节点进行挂载。因此，我们在调用 <strong>patch</strong> 函数挂载节点时，使用 <strong>oldStartVNode.el</strong> 作为锚点。执行结果如下图所示： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684253830846-488fd0cb-c636-4f70-8156-0fa3681f3568.png#averageHue=%23f1f1f1&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=325&amp;id=u0c1fc0da&amp;originHeight=650&amp;originWidth=1292&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=109515&amp;status=done&amp;style=none&amp;taskId=u3ef3944f-05ae-4795-a8ba-18366dabb73&amp;title=&amp;width=646" alt="image.png"></p><p>然而，这个算法并不完美。例如，看下面例子 <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684253881403-20c8e45e-35bc-44fa-826c-8bb6b8f45633.png#averageHue=%23eeeeee&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=266&amp;id=u5d4eaff5&amp;originHeight=532&amp;originWidth=1280&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=111106&amp;status=done&amp;style=none&amp;taskId=u5f4f1138-0040-4aeb-8276-02b1fd2632d&amp;title=&amp;width=640" alt="image.png"> 新子节点集合的顺序为 p-4、p-1、p-2、p-3 时，我们按照双端 Diff 算法 的思路来执行更新下：</p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-4，两者的 key 值不同，不可以复用。</li><li>比较旧的一组子节点中的尾部节点 p-3 与新的一组子节点中的尾部节点 p-3，两者的 key 值相同，可以复用。</li></ol><p>在第二步中找到了可复用的节点，因此进行更新，结果如图： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684253986664-991fa078-1ea3-4cb8-a1b9-9972db46be7b.png#averageHue=%23f0f0f0&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=260&amp;id=u60fa3b4a&amp;originHeight=520&amp;originWidth=1288&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=107639&amp;status=done&amp;style=none&amp;taskId=u98ce7a88-9ac1-4612-8d43-c2d0f3636ce&amp;title=&amp;width=644" alt="image.png"> 接着进行下一轮更新：</p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-4，两者的 key 值不同，不可以复用。</li><li>比较旧的一组子节点中的尾部节点 p-2 与新的一组子节点中的尾部节点 p-2，两者的 key 值相同，可以复用。</li></ol><p>在第二步中找到了可复用的节点，因此再次进行更新，结果如图： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684254066864-f387adb0-fbb5-4f60-aa75-207a3e9fffbf.png#averageHue=%23f1f1f1&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=262&amp;id=u3e472e24&amp;originHeight=524&amp;originWidth=1284&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=107556&amp;status=done&amp;style=none&amp;taskId=u660f3c12-eed3-4f33-955d-a2463bc701a&amp;title=&amp;width=642" alt="image.png"> 接着，进行下一轮的更新：</p><ol><li>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-4，两者的 key 值不同，不可以复用。</li><li>比较旧的一组子节点中的尾部节点 p-1 与新的一组子节 点中的尾部节点 p-1，两者的 key 值相同，可以复用。</li></ol><p>在第二步中找到了可复用的节点，因此再次进行更新，结果如图： <img src="https://cdn.nlark.com/yuque/0/2023/png/21596389/1684254141462-d4faec70-7a4a-4d88-9d85-81d7d6192922.png#averageHue=%23f5f5f5&amp;clientId=u0262990c-1b7f-4&amp;from=paste&amp;height=306&amp;id=u2e3294c4&amp;originHeight=612&amp;originWidth=1292&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=102824&amp;status=done&amp;style=none&amp;taskId=ua73ba1af-2c56-45bd-a35e-629a34af739&amp;title=&amp;width=646" alt="image.png"> 当这一轮更新完毕后，由于变量 oldStartIdx 的值大于 oldEndIdx 的值，满足更新停止的条件，因此更新停止。 但通过观察 可知，节点 p-4 在整个更新过程中被遗漏了，没有得到任何处理，这 说明我们的算法是有缺陷的。 为了弥补这个缺陷，我们需要添加额外的处理代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (oldStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> oldEndIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 循环结束后检查索引值的情况</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (oldEndIdx </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> oldStartIdx </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> newStartIdx </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> newEndIdx) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果满足条件，则说明有新的节点遗留，需要挂载它们</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newStartIdx</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newEndIdx</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newChildren</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldStartVNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个改进后的版本中，如果 <strong>oldEndIdx &lt; oldStartIdx &amp;&amp; newStartIdx &lt;= newEndIdx</strong> 成立，这意味着新子节点集合中有未处理的节点需要作为新节点挂载。这些新节点的索引值在 <strong>newStartIdx</strong> 和 <strong>newEndIdx</strong> 这个区间内。 因此，我们使用一个 for 循环来遍历这个区间内的节点并逐一挂载。挂载时的锚点仍然使用当前的头节点 <strong>oldStartVNode.el</strong>，这样我们就完成了对新增元素的处理。</p>`,58),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
